.. sse-platform documentation master file, created by
   sphinx-quickstart on Sat Nov 30 10:00:44 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

.. toctree::
   :maxdepth: 2
   :caption: Contents:

API Documentation
*****************

Frontend
========

.. http:get:: /

    The main Page

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: text/html

    :statuscode 200: no error
    :statuscode 401: no acces token or not valid

Modules
=======

.. http:get:: /modules/list_available

    List all modules that are available in the remote module repository

    **Example request**:

    .. sourcecode:: http

        GET /modules/list_available HTTP/1.1
        Host: example.com
        Accept: application/json

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "type": "list_available_modules",
            "modules": ["module1", "module2"]
        }

    :resheader Content-Type: application/json

    :statuscode 200: no error

.. http:get:: /modules/list_installed

    List all modules that are currently installed

      **Example request**:

    .. sourcecode:: http

        GET /modules/list_installed HTTP/1.1
        Host: example.com
        Accept: application/json
        Authorization: osdnosdgz90823zg03203297324=

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "type": "list_installed_modules",
            "installed_modules": ["module1", "module2"]
        }

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: no access token or not valid

.. http:get:: /modules/download

    Download a module

    **Example request**:

    .. sourcecode:: http

        GET /modules/download?module_name="module1" HTTP/1.1
        Host: example.com
        Accept: application/json
        Authorization: nosfn038h0g23g023ßgu92u93g=

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "type": "installation_response",
            "module": "module1",
            "success": true
        }

    :query module_name: name of the module to download

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: no access token or not valid

.. http:get:: /modules/uninstall

    Uninstall a module, If currently running, stop it

    **Example request**:

    .. sourcecode:: http

        GET /modules/uninstall?module_name="module1" HTTP/1.1
        Host: example.com
        Accept: application/json
        Authorization: soaihfoiwhf0128f0z12f0=

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "type": "uninstallation_response",
            "module": "module1",
            "success": true
        }

    :query module_name: name of the module to uninstall

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: no access token or not valid

Configs
=======

.. http:get:: /configs/view

    Get the config of a module (in JSON)

    **Example request**:

    .. sourcecode:: http

        GET /configs/view?module_name="module1" HTTP/1.1
        Host: example.com
        Accept: application/json
        Authorization: aoiwfhoifh08fh0238f32wqf23f32gg=

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "type": "view_config",
            "module": "module1",
            "config": <config>
        }


    :query module_name: name of the module to view the config of

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: no access token or not valid

.. http:post:: /configs/update

    Change the config of a module

    **Example request**:

    .. sourcecode:: http

        POST /configs/update?module_name="module1" HTTP/1.1
        Host: example.com
        Content-Type: application/json
        Accept: application/json
        Authorization: aowfaiwhfi0f8h32fß23f1pi2f1f=

        {
            "key1": "value1",
            "key2": "value2",
        }

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK

    :query module_name: name of the module to view the config of

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: no access token or not valid

Module Execution
================

.. http:get:: /execution/start

    start a module

    **Example request**:

    .. sourcecode:: http

        GET /execution/start?module_name="module1" HTTP/1.1
        Host: example.com
        Accept: application/json
        Authorization: osihfoiehf023hf023hßf9hß32hfp23f=

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "type": "starting_response",
            "module": "module1",
            "success": true,
            "port": 123456
            "reason": <string> # omitted if success is true, else a reason for failure
        }

    :query module_name: name of the module to start

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: no access token or not valid

.. http:get:: /execution/stop

    stop a module

    **Example request**:

    .. sourcecode:: http

        GET /execution/stop?module_name="module1" HTTP/1.1
        Host: example.com
        Accept: application/json
        Authorization: sifoaifj03jfß0923jßfj23fß9j03iof2=

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK

    :query module_name: name of the module to stop

    :reqheader Authorization: valid access token generated by login/register

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: no access token or not valid


Login
=====

.. http:post:: /login

    Login by giving your credentials as query params to obtain an access token.
    You can either use your email address or nickname

    **Example request**:

    .. sourcecode:: http

        GET /login?email="testmail@mail.de"&nickname="test1"&password="testpw" HTTP/1.1
        Host: example.com
        Accept: application/json

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "status": 200,
            "success": true,
            "access_token": "aosnfoiwf023nf932ßf9awff2f2g3g="
        }

    :query email: email address
    :query nickname: nickname
    :query password: password

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 401: wrong password
    :statuscode 409: user not found


Registration
============

.. http:post:: /register

    Register an account on the server and obtain an access token

    **Example request**:

    .. sourcecode:: http

        GET /register?email="testmail@mail.de"&nickname="test1"&password="testpw" HTTP/1.1
        Host: example.com
        Accept: application/json

    **Example response**:

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "status": 200,
            "success": true,
            "access_token": "aosnfoiwf023nf932ßf9awff2f2g3g="
        }

    :query email: email address
    :query nickname: nickname
    :query password: password

    :resheader Content-Type: application/json

    :statuscode 200: no error
    :statuscode 409: user already exists, user login instead


Code Documentation
******************

github_access.py
================
.. automodule:: github_access
    :members:

util.py
=======
.. automodule:: util
    :members:

main.py
=======
.. automodule:: main
    :members:

db_access.py
============
.. automodule:: db_access
    :members:

token_cache.py
==============
.. automodule:: token_cache
    :members:



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
